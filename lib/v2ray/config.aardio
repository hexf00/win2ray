
namespace v2ray.config;

setOutbound = function(outbound){
	import config;
	import web.json;
	import v2ray.core;
	
	var current = ..table.clone(config.core.default);
	if( ! current.inbounds[1].port  ){
		current.inbounds[1].port = ..v2ray.core.getPort();
	}
	else{
		..v2ray.core.setPort(current.inbounds[1].port);
	}

	if(outbound.protocol=="vmess"){
		var ob = {
			mux={
				concurrency=8;
				enabled=true
			};
			protocol="vmess";
			settings={
				vnext={
					{
						address=outbound.address;
						level=outbound.level : 0;
						port=outbound.port;
						users={
							{
								alterId=outbound.alterId : 0;
								email=outbound.email : "t@t.tt";
								id=outbound.id;
								security=outbound.security;
							}
						}
					}
				};
			};
			streamSettings={
				network=outbound.network : "tcp";
				security=outbound.tls;
				tlsSettings = outbound.tls ? {
					allowInsecure = outbound.tlsAllowInsecure;
							serverName = outbound.tlsServerName;
				}
			};
			tag="proxy"
		};
		
		if( outbound.network == "ws" ){
			ob.streamSettings.wsSettings = {
				path = outbound.path;
				headers = outbound.headers;
				connectionReuse = true;
			}
		}
		elseif( outbound.network == "http" ){
			ob.streamSettings.httpSettings = {
				connectionReuse = true;
				path = outbound.path;
				host = outbound.host;
			}
		}
		elseif( outbound.network == "tcp" ){
			if( outbound.type == "http" ){
				ob.streamSettings.tcpSettings = {
					connectionReuse = true;
					header = {
						request={
							headers={ 
								Connection={
									"keep-alive"
								};
								Host=outbound.host;
								Pragma="no-cache";
								["Accept-Encoding"]={
									"gzip, deflate"
								};
								["User-Agent"]={
									"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36";
									"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_2 like Mac OS X) AppleWebKit/601.1 (KHTML, like Gecko) CriOS/53.0.2785.109 Mobile/14A456 Safari/601.1.46"
								}
							};
							method="GET";
							path = outbound.path;
							version="1.1"
						};
						type="http"; 
					} 
				} 
			}
		}
		
		current.outbounds[1] = ob;
	}
	elseif(outbound.protocol=="shadowsocks"){
		current.outbounds[1] = {
			mux={
				concurrency=-1;
				enabled=false
			};
			protocol="shadowsocks";
			settings={
				servers={
					{
						address=outbound.address;
						level=outbound.level : 0;
						method=outbound.security;
						ota=false;
						password=outbound.id;
						port=outbound.port;
					}
				};
			};
			streamSettings={
				network = outbound.network : "tcp";
			};
			tag="proxy"
		};
	} 

	..thread.set("v2ray.core.config",web.json.stringify(current))
}

getConfigJson = function(){
	return ..thread.get("v2ray.core.config");
}

exportToString = function(outbounds){
	import web.json;
	import crypt;
	
	var outString = {};
	for i,outbound in ..table.eachIndex(outbounds){
		if(outbound.protocol == "vmess"){
			var json = ..web.json.stringify({
				v = 2;
				add = outbound.address;
				aid = outbound.alterId;
				id = outbound.id; 
				port = outbound.port;
				net = outbound.net;
				type = outbound.type;
				path = outbound.path;
				host = outbound.host;
				tls = outbound.tls;
			})
			
			var vmess = "vmess://" + ..crypt.encodeBin(json);
			..table.push(outString,vmess);
		}
		elseif(outbound.protocol == "shadowsocks"){
			var ss = "ss://" + ..crypt.encodeBin( outbound.security + ":" + outbound.id + "@" + outbound.address + ":" + outbound.port) + "#" + outbound.address + ":" + outbound.port;
			..table.push(outString,ss);
		} 
	}	
	
	return ..string.join(outString,'\r\n');
}

importFromString = function(str){ 
	import web.json;
	import crypt;

	if(!str){ return; }
	
	var outbounds = {};
	for(line in ..string.lines(str) ){
		if(line[1]=='#'#){
			continue;
		}
		
		var vmess = ..string.match(line,`vmess\:\/\/([\w=+]+)`);
		if( vmess ) {  
			var json = ..crypt.decodeBin(vmess);	
			var outbound = ..web.json.tryParse(json);	
			if(outbound){
				..table.clear(outbound@._defined);
				outbound.protocol = "vmess";
				outbound.address = outbound.add;
				outbound.alterId = outbound.aid;
				outbound.security = "auto";
				outbound.network = outbound.net : "tcp";
				outbound.net = null;
				outbound.add = null;
				outbound.aid = null;
				outbound.v = null;
				..table.push(outbounds,outbound);
			} 
			
			continue;
		}	
		
		var ss = ..string.match(line,`ss\:\/\/([\w=+]+)`);
		if( ss ) {   
			var ss = ..crypt.decodeBin(ss); 
			var method,password,address,port = ..string.match(ss,"^(.+)\:(.+)\@(.+)\:(\d+)")	 
	
			if(address && password && port){
				var outbound = {
					address = address;
					port = tonumber(port);
					security = method;
					id = password;
					network = "tcp";
					protocol = "shadowsocks"
				};
	
				..table.push(outbounds,outbound);
			} 
			
			continue;
		}
		
		var address,port,id,network,path,tls = ..string.match(line,"(<\w+\.>+\w+)\s+(\d+)\s+([\w-]+)\s+(\a+)\s+(\S+)\s+(\a+)")
		if(!address) address,port,id,network,path = ..string.match(line,"(<\w+\.>+\w+)\s+(\d+)\s+(\S+)\s+(\a+)\s+(\S+)")
		if(!address) address,port,id,network = ..string.match(line,"(<\w+\.>+\w+)\s+(\d+)\s+(\S+)\s+(\a+)")
		
		if(address && port && id){
			var outbound  = {
				address = address;
				port = tonumber(port);
				id = id;
				network = network;
				path = path;
				tls = tls;
				security= "auto";
				protocol = "vmess"
			}
			
			if(outbound.network=="shadowsocks"){
				outbound.network = "tcp";
				outbound.protocol = "shadowsocks";
				outbound.security = outbound.path;
				outbound.path = null;
			}
			..table.push(outbounds,outbound)
		}
	}
	
	return outbounds;
}

importFromClip  = function(){
	import win.clip;
	var str = ..win.clip.read();
	if(!str){ return; }
	
	return importFromString(str);
}